@using BlazorLearningApp.Controller;
@using BlazorLearningApp.Models;
@using global::App.Models;

@inject PeopleHandlar peopleHandler;

<SurveyPrompt Title="Update/Insert List" />
<div class="container py-3">
    <div class="card shadow-sm">
        <div class="card-body">
            <EditForm Model="people" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="inputid" class="form-label">ID</label>
                        <InputNumber @bind-Value="people.Id" class="form-control" id="inputid" @onfocusout="HandalUpdate" />
                    </div>
                    <div class="col-md-6">
                        <label for="inputname" class="form-label">Name</label>
                        <InputText @bind-Value="people.Name" class="form-control" id="inputname" />
                        <ValidationMessage For="@(() => people.Name)" />
                    </div>
                    <div class="col-md-6">
                        <label for="inputmobile" class="form-label">Mobile</label>
                        <InputText @bind-Value="people.Mobile" class="form-control" id="inputmobile" />
                        <ValidationMessage For="@(() => people.Mobile)" />
                    </div>
                    <div class="col-md-6">
                        <label for="inputEmail" class="form-label">Email</label>
                        <InputText @bind-Value="people.Email" class="form-control" id="inputEmail" />
                        <ValidationMessage For="@(() => people.Email)" />
                    </div>
                    <div class="col-12">
                        <label for="inputAddress" class="form-label">Address</label>
                        <InputText @bind-Value="people.Address" class="form-control" id="inputAddress" placeholder="1234 Main St" />
                        <ValidationMessage For="@(() => people.Address)" />
                    </div>
                    <div class="col-12 d-flex gap-2 mt-3">
                        <button type="submit" class="btn btn-success" style="display:@AddbtnVisibility">
                            <i class="bi bi-plus-circle"></i> Add
                        </button>
                        <button type="button" @onclick="Update" class="btn btn-warning" style="display:@UpdatebtnVisibility">
                            <i class="bi bi-pencil-square"></i> Update
                        </button>
                        <button type="button" @onclick="ClearForm" class="btn btn-secondary ms-auto">
                            <i class="bi bi-x-circle"></i> Clear
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    DisplayPeople people;
    private string AddbtnVisibility;
    private string UpdatebtnVisibility;

    [Parameter]
    public EventCallback UpdatePeopleList { get; set; }

    protected override void OnInitialized()
    {
        people = new DisplayPeople();
        AddbtnVisibility = "unset";
        UpdatebtnVisibility = "none";
    }

    private async Task HandleValidSubmit()
    {
        await AddPeople();
    }

    private async Task AddPeople()
    {
        if(people != null)
        {
            People p = people.ConverDbModel();
            peopleHandler.AddPeople(people.ConverDbModel());
            ClearForm();
            await UpdatePeopleList.InvokeAsync();
        }
    }

    private async Task Update()
    {
        AddbtnVisibility = "unset";
        UpdatebtnVisibility = "none";
        peopleHandler.UpdatePle(people.ConverDbModel());
        ClearForm();
        await UpdatePeopleList.InvokeAsync();
    }

    private void ClearForm()
    {
        people = new DisplayPeople();
        AddbtnVisibility = "unset";
        UpdatebtnVisibility = "none";
    }

    private void HandalUpdate()
    {
        int id = people.Id;
        People p = peopleHandler.GetPeopleById(id);
        if(p != null)
        {
            people.SetDisplayModel(p);
            AddbtnVisibility = "none";
            UpdatebtnVisibility = "unset";
        }
        else
        {
            ClearForm();
        }
    }
}
